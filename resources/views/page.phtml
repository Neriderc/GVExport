<?php

namespace vendor\WebtreesModules\gvexport;

use Fisharebest\Webtrees\Auth;
use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\Individual;
use Fisharebest\Webtrees\Module\FamilyTreeFavoritesModule;
use Fisharebest\Webtrees\Module\UserFavoritesModule;
use Fisharebest\Webtrees\Tree;

/**
 * @var Tree        $tree                   the webtrees tree instance of the current tree
 * @var Individual  $individual             the webtrees individual object instance of the XREF in the URL
 * @var string      $title                  title of this page
 * @var array       $vars                   array of saved settings
 * @var array       $otypes                 output file type options
 * @var bool        $cartempty              are there any individuals (INDI records) in the clippings cart?
 * @var GVExport    $module                 instance of this module
 */

$settings = (new Settings())->getDefaultSettings();
$usegraphviz = $vars['graphviz_bin'] != "";
?>

<link href="<?= $module->assetUrl('css/gvexport.css'); ?>" rel="stylesheet">
<?= view($module->name() . '::MainPage/Translations'); ?>
<script type="text/javascript">
    const cartempty = <?= $cartempty ? "true" : "false" ?>;
    let autoUpdate = <?= $vars["auto_update"] ? 'true' : 'false' ?>;
    let debug_string = "";
    let TOMSELECT_URL = "";
    let download_file_name = "<?= e($settings['filename']); ?>";
    let url_xref_treatment = "<?= e($vars['url_xref_treatment']); ?>";
    let shared_note_default = "<?= $vars['sharednote_col_default']; ?>";
    let firstRender = <?= $vars['first_render'] ? 'true' : 'false'; ?>;
    let messages = [];
    const TREE_NAME = "<?= e($tree->name()); ?>";
    const TREE_FAVORITES_MODULE_ACTIVE = <?= $module->module_service->findByInterface(FamilyTreeFavoritesModule::class)->first() === null || !Auth::isManager($tree) ? "false" : "true" ?>;
    const MY_FAVORITES_MODULE_ACTIVE = <?= $module->module_service->findByInterface(UserFavoritesModule::class)->first() === null ? "false" : "true" ?>;

</script>
<h2 class="wt-page-title">
    <?= $title ?>
</h2>

<form action="<?= $module->chartUrl($individual) ?>" method="post" class="sidebar d-print-none" id="gvexport">
    <div class="pull-right btn-hover">
        <a class="hide-form btn btn-secondary pointer"><i class="fa-solid fa-xmark"></i></a>
    </div>

    <div class="sidebar__formfields col">

        <?= csrf_field() ?>

        <div id="saved_diagrams_panel" <?php if (!$vars["show_diagram_panel"]) echo 'style="display: none"'; ?>>
            <div class="d-flex">
                <h3><?= I18N::translate('Saved diagrams') ?></h3>
            </div>

            <div class="row no-right-margin form-group">
                <?= MainPage::addLabel('simple_settings_list', 'List of diagrams'); ?>
                <div class="col-sm-8 options-panel-background">
                    <select id="simple_settings_list" class="form-select">
                        <option value="-">-</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="d-flex">
            <h3><?= I18N::translate('People to be included') ?></h3>
        </div>

        <?php
        // Include the "People to be included" section of the settings
        echo view($module->name() . '::MainPage/PeopleToInclude',
            [
                'vars' => $vars,
                'tree' => $tree,
                'cartempty' => $cartempty,
                'module' => $module,
                'settings' => $settings,
                'admin' => false
            ]); ?>

<h3><?= I18N::translate('Appearance') ?></h3>

        <?php
        // Include the "Appearance" section of the settings
        echo view($module->name() . '::MainPage/Appearance',
            [
                'vars' => $vars,
                'tree' => $tree,
                'module' => $module,
                'settings' => $settings,
                'usegraphviz' => $usegraphviz,
                'individual' => $individual,
                'admin' => false
            ]); ?>

        <h3><?= I18N::translate('General settings') ?></h3>
        <?php
        // Include the "General Settings" section of the settings
        echo view($module->name() . '::MainPage/GeneralSettings',
            [
                'vars' => $vars,
                'module' => $module,
                'settings' => $settings,
                'usegraphviz' => $usegraphviz,
                'otypes' => $otypes,
                'admin' => false
            ]); ?>
        <?php if ($vars["show_debug_panel"]) { ?>
            <h3><?= I18N::translate('Debug') ?></h3>
            <?php
            // Include the "General Settings" section of the settings
            echo view($module->name() . '::MainPage/DebugPanel',
                [
                    'vars' => $vars,
                    'admin' => false
                ]); ?>
        <?php } ?>
    </div>

    <div class="sidebar__buttons">
        <button type="submit" class="btn btn-primary update-browser-rendering" id="update-browser" <?php if ($vars["auto_update"]) { echo 'style="display: none"'; } ?>><?= I18N::translate('Update') ?></button>
        <button type="submit" class="btn btn-secondary main-action" name="download"><?= I18N::translate('Download') ?></button>
        <a href="<?= $module->chartUrl($individual, ['reset' => '1']) ?>" class="btn btn-outline-secondary"><?= I18N::translate('Reset') ?></a>
        <button id="help-about" class="btn btn-outline-secondary" name="help"><?= I18N::translate('Help') ?></button>
    </div>

    <input type="hidden" id="browser" name="browser" value="false">
    <input type="hidden" id="people-advanced-hidden" name="vars[show_adv_people]" value="<?= $vars["show_adv_people"] ? 'show' : '' ?>">
    <input type="hidden" id="appearance-advanced-hidden" name="vars[show_adv_appear]" value="<?= $vars["show_adv_appear"] ? 'show' : '' ?>">
    <input type="hidden" id="files-advanced-hidden" name="vars[show_adv_files]" value="<?= $vars["show_adv_files"] ? 'show' : '' ?>">
    <div id="toast-container"></div>
</form>

<div class="sidebar_toggle" hidden>
    <a class="btn btn-outline-secondary pointer"><?= I18N::translate('Show options') ?></a>
</div>

<?= view($module->name() . '::MainPage/Help', []); ?>

<div id="render-container">
    <div id="rendering" hidden style="background-color: <?= $vars["background_col"] ?>;"></div>
    <div id="render_button_container">
        <div>
            <a title="<?= I18N::translate('Fullscreen') ?>" onclick="toggleFullscreen()" class="fullscreen pointer" id="fullscreenButton">â›¶</a>
            <a title="<?= I18N::translate('Exit fullscreen') ?>" onclick="toggleFullscreen()" class="close-fullscreen pointer" id="fullscreenClose" style="display: none;"><i class="fa-solid fa-xmark"></i></a>
        </div>
        <div>
            <a title="<?= I18N::translate('Search diagram') ?>" onclick="" class="search_icon pointer" id="searchButton"><?= view('icons/search'); ?></a>
            <div id="diagram_search_box_container" style="display: none"><?= view('components/select-individual', ['name' => 'diagram_search_box', 'id' => 'diagram_search_box', 'tree' => $tree, 'individual' => "", 'required'=>false]); ?></div>
        </div>
    </div>
    <div id="context_menu">
        <span id="menu-info">
            <?= MainPage::addInfoButton('Context menu when individual clicked'); ?>
        </span>
    </div>
</div>
<script src="<?= $module->assetUrl('javascript/viz-standalone.js'); ?>"></script>
<script src="<?= $module->assetUrl('javascript/panzoom.min.js'); ?>"></script>
<script src="<?= $module->assetUrl('javascript/gvexport.js'); ?>"></script>
<script src="<?= $module->assetUrl('javascript/MainPage/UI.js'); ?>"></script>
<script src="<?= $module->assetUrl('javascript/MainPage/Form.js'); ?>"></script>
<script src="<?= $module->assetUrl('javascript/MainPage/Data.js'); ?>"></script>
<?= $usegraphviz ? "" : "<script src=\"" . $module->assetUrl('javascript/jspdf.umd.min.js') . "\"></script>"; ?>
<script type="text/javascript">
    let graphvizAvailable = <?= $usegraphviz ? "true" : "false" ?>;
    let panzoomInst = null;
    const form = document.getElementById('gvexport');
    const rendering = document.getElementById('rendering');

    // Trigger action when "Update" button clicked
    document.querySelector('.update-browser-rendering').addEventListener('click', function(e) {
        if (Form.isIndiBlank() === false) {
            updateRender();
            refreshIndisFromXREFS(false);
            removeError("indi-error");
        } else {
            addError("indi-error","<?= I18N::translate('Individual required') ?>");
        }
        e.preventDefault();
    });

    // If "Download" button clicked
    document.querySelector('.main-action').addEventListener('click', function(e) {
        // first check that individual has been selected
        if (Form.isIndiBlank() === false) {
            removeError("indi-error");
        } else {
            addError("indi-error","<?= I18N::translate('Individual required') ?>");
            e.preventDefault();
        }

        // If not client side, submit will be triggered and server side used
        if (Form.mustUseClientGeneration()) {
            const output = document.getElementById('output_type').value;
            switch(output) {
                case "png":
                    Data.download.downloadSVGAsPNG();
                    break;
                case "svg":
                    if (graphvizAvailable) UI.showToast(TRANSLATE['Diagram rendered in browser due to settings selected'])
                    Data.download.downloadSVGAsText();
                    break;
                case "jpg":
                    Data.download.downloadSVGAsJPEG();
                    break;
                case "pdf":
                    Data.download.downloadSVGAsPDF();
                    break;
                default:
            }
            if (output !== "dot") {
                e.preventDefault();
            }
        }

        // Replay messages from when diagram was generated, since we can't re-fetch
        if (messages !== []) {
            for (let i = 0; i < messages.length; i++) {
                UI.showToast(messages[i]);
            }
        }
    });

    function updateRender(scrollX = null, scrollY = null, zoom = null, xref = null) {
        // Don't overwrite browser settings with default settings
        if (!firstRender) {
            // Update settings in browser storage if logged out
            isUserLoggedIn().then((loggedIn) => {
                if (!loggedIn) {
                    Data.storeSettings.saveSettingsClient(ID_MAIN_SETTINGS);
                }
            });
        }

        // Set browser value to true so we can return other info with DOT file
        // that can't be included with downloaded file
        document.getElementById("browser").value = "true";

        // Update render element background to match diagram background
        document.getElementById("rendering").style.background = document.getElementById("background_col").value;

        // Enable disabled fields so they are included in serialised data - this means the values are remembered
        const el = document.getElementsByClassName("cart_toggle");
        for (let i = 0; i < el.length; i++) {
            el.item(i).disabled = false;
        }
        // Get the form data
        const data = jQuery(form).serialize();
        // Disable our fields again by indicating cart is enabled (only if items in cart)
        if (!cartempty && document.getElementById("usecart_yes").checked) {
            Form.toggleCart(true);
        }
        Form.showHideMatchCheckbox('mark_not_related', 'mark_related_subgroup');
        document.getElementById("browser").value = "false";
        let lastDotStr;

        // Show loading message unless we are doing some nice dynamic tree growing stuff
        if (!scrollX || !scrollY) {
            rendering.innerHTML = '<div class="d-flex justify-content-center h-100"><div class="spinner-border align-self-center" role="status"><span class="sr-only">Loading...</span></div></div>';
        }
        rendering.hidden = false;

        const MARGIN = 50;
        let footerEl = document.querySelector('.wt-footers');
        let footerHeight = footerEl ? footerEl.getBoundingClientRect().height : 50;
        const h = window.innerHeight - document.querySelector('.wt-header-wrapper').getBoundingClientRect().height - footerHeight;
        const w = window.innerWidth - MARGIN*2;
        const wtMainContainer = document.getElementsByClassName('wt-main-container').item(0);
        const wtTitle = document.getElementsByClassName("wt-page-title").item(0);
        // Set size of render element to fit browser
        document.getElementById('render-container').style.height = h + "px";
        document.getElementById('render-container').style.width = w + "px";
        document.getElementById('render-container').style.left = MARGIN + "px";
        // Set size of container element so webtrees footer is in the right place
        const totalHeight = MARGIN + wtTitle.getBoundingClientRect().height + getComputedProperty(wtTitle, 'margin-bottom') + h + getComputedProperty(wtMainContainer, 'padding-top');
        wtMainContainer.style.height = totalHeight + "px";

        window.fetch(form.getAttribute('action'), {
            method: form.getAttribute('method'),
            credentials: 'same-origin', // include, *same-origin, omit
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: data
        }).then(function (response) {
            if (!response.ok) {
                return response.text().then(function (errorText) {
                    return Promise.reject(errorText)
                });
            }
            return response.text();
        }).then(function (response) {
            let jsonResponse;
            // If login expires, we will get error page instead of JSON.
            // Reload if loading JSON fails
            try {
                jsonResponse = JSON.parse(response);
            } catch(e) {
                let errorpos = response.substring(0,1000).indexOf('Fatal error');
                if (errorpos === -1) {
                    setTimeout(function(){location.reload();}, 3000);
                    UI.showToast(ERROR_CHAR + "<?= I18N::translate('Login expired. Reloading page...'); ?>");
                } else {
                    UI.showToast(ERROR_CHAR + e);
                    UI.showToast(ERROR_CHAR + response.substring(0,Math.min(1000, errorpos)));
                }
                return false;
            }
            lastDotStr = jsonResponse.dot;
            if (lastDotStr.indexOf("digraph WT_Graph {") !== -1) {
                messages = jsonResponse.messages;
                debug_string = jsonResponse.enable_debug_mode;
            }
            const images = [...lastDotStr.matchAll(/<IMG[^>]+SRC="([^"]*)/gmi)].map(function (matches) {
                return {
                    name: matches[1],
                    width: '150px',
                    height: '150px'
                };
            });
            return Viz.instance().then(function(viz) {
                return viz.renderSVGElement(lastDotStr, {
                    images: images
                });
            });

        }).then(function (element) {
            // Now we have to clean up the generated SVG.
            cleanSVG(element);

            // Clear current rendering then append new element to the page
            rendering.innerHTML = "";
            rendering.appendChild(element);

            // Add SVG change observer in case of zooming
            let svg = rendering.querySelector('svg');
            const observer = new MutationObserver(() => {
                UI.contextMenu.clearContextMenu();
            });
            observer.observe(svg, { attributes: true });

            const fullZoom = Math.min(4, rendering.getBoundingClientRect().width / element.getBBox().width);
            panzoomInst = panzoom(element, {
                maxZoom: 4,
                minZoom: fullZoom / 10,
                initialZoom: 1,
                onTouch: function() {
                    // Fix links not working on mobile
                    return false; // tells the library to not preventDefault.
                }
            });
            if (messages !== []) {
                for (let i = 0; i < messages.length; i++) {
                    UI.showToast(messages[i]);
                }
            }
            // scroll to the nominated individual
            if (xref) {
                UI.scrollToRecord(xref, scrollX, scrollY, zoom);
            } else {
            // Otherwise scroll to last individual on starting individuals list
                let indiList = document.getElementById('xref_list').value.split(",");
                for (let i = indiList.length - 1; i >= 0; i--) {
                    if (indiList[i].trim() !== "") {
                        UI.scrollToRecord(indiList[i].trim());
                        break;
                    }
                }
            }

            UI.tile.handleTileClick();
            createXrefListFromSvg();
            return element;
        }).catch(function (error) {
            console.log(error);
            if (error.message && error.message.includes("TOTAL_MEMORY")) {
                if (graphvizAvailable) {
                    UI.showToast(ERROR_CHAR + "<?= I18N::translate('Memory limit reached. Please reduce number of records or use download option.'); ?>");
                } else {
                        UI.showToast(ERROR_CHAR + "<?= I18N::translate('Memory limit reached. Please reduce number of records or install Graphviz on server and use download option.'); ?>");
                }
                rendering.innerHTML = "";
            } else {
                rendering.innerHTML = '<div class="alert alert-danger" role="alert"><?= I18N::translate('Error running GVExport in browser mode') ?>:<br>' + error + '</div>';
                if (lastDotStr) {
                    rendering.innerHTML = rendering.innerHTML + '<h4>DOT contents</h4><pre id="dot-text"></pre>';
                    document.getElementById('dot-text').appendChild(document.createTextNode(lastDotStr));
                }
            }
        });
        return false;
    }

    // Add an error message to the page
    // id - the id of the element that holds the message
    // message - the text to show in the error message
    function addError(id, message) {
        let er = document.getElementById(id);
        er.innerText=message;
        let el = document.getElementsByClassName("sidebar__formfields");
        let form = document.getElementsByTagName("FORM");
        let pos = Form.getPos(er,form.item(1));
        el.item(0).scrollTo(0,pos["y"]-70);
    }

    // Removes the error text in the provided element
    function removeError(id) {
        let er = document.getElementById(id);
        er.innerText="";
    }

</script>

<script type="text/javascript">
    const mainPage = {};
    function runPageLoaded(Url) {
        if (typeof pageLoaded === 'function' && typeof jQuery === 'function') {
            Url.changeURLXref('<?= e($individual->xref()); ?>');
            pageLoaded(Url);
        } else {
            // If external script loads before inline script, then wait
            // before trying to run page loaded function.
            setTimeout(()=>{runPageLoaded(Url)}, 100);
        }
    }
    import('<?= $module->assetUrl('javascript/MainPage/Url.js'); ?>').then((module)=>{
        mainPage.Url = new module.Url();
        runPageLoaded(mainPage.Url);
    })
    import('<?= $module->assetUrl('javascript/MainPage/SettingsGroup.js'); ?>').then((module)=>{
        new module.SettingsGroup('subgroup_background_vitals', 'bg_col_type', '<?= Settings::OPTION_BACKGROUND_VITAL_COLOUR;?>');
        new module.SettingsGroup('shape_sex_subgroup', 'indi_tile_shape', '<?= Person::TILE_SHAPE_SEX;?>');
        new module.SettingsGroup('vitals_shape_subgroup', 'indi_tile_shape', '<?= Person::TILE_SHAPE_VITAL;?>');
        new module.SettingsGroup('subgroup_background_custom', 'bg_col_type', '<?= Settings::OPTION_BACKGROUND_CUSTOM_COLOUR;?>');
        new module.SettingsGroup('subgroup_background_age', 'bg_col_type', '<?= Settings::OPTION_BACKGROUND_AGE_COLOUR;?>');
        new module.SettingsGroup('subgroup_border_custom', 'border_col_type', '<?= Settings::OPTION_BORDER_CUSTOM_COLOUR;?>');
        new module.SettingsGroup('subgroup_border_vitals', 'border_col_type', '<?= Settings::OPTION_BORDER_VITAL_COLOUR;?>');
        new module.SettingsGroup('subgroup_border_age', 'border_col_type', '<?= Settings::OPTION_BORDER_AGE_COLOUR;?>');
        new module.SettingsGroup('server_pdf_subgroup', 'output_type', 'pdf|svg|jpg', () => {return graphvizAvailable});
        new module.SettingsGroup('subgroup_stripe_vitals', 'stripe_col_type', '<?= Settings::OPTION_STRIPE_VITAL_COLOUR;?>');
        new module.SettingsGroup('subgroup_stripe_age', 'stripe_col_type', '<?= Settings::OPTION_STRIPE_AGE_COLOUR;?>');
    })
</script>
